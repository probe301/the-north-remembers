
import os
import random

from collections import OrderedDict
from collections import Counter

import tools
from tools import UrlType
from tools import parse_type
from tools import create_logger
from tools import time_to_str
from tools import duration_from_humanize
from tools import time_now
from tools import time_now_str
from tools import time_from_str
from tools import time_to_humanize
from tools import remove_invalid_char

log = create_logger(__file__)
log_error = create_logger(__file__ + '.error')


from page import Page
# from werkzeug.contrib.atom import AtomFeed
from feedgen.feed import FeedGenerator

def remember(commit_log, watcher_path):
  ''' 将 watcher 抓取到的内容存储到 git 仓库
      git 仓库通常位于 watcher folder 的上一层
  '''
  git_path = os.path.dirname(watcher_path) # watcher folder 上一层
  cmd = 'cd {} && git add . && git commit -m "{}"'.format(git_path, commit_log)
  # log(cmd)
  os.system(cmd)
  log('Watcher.remember added + committed {} {}'.format(watcher_path, commit_log))



def generate_feed(watcher_path, limit=10, ):
  ''' 生成 RSS, 内容为全部 page_task, 
      按照添加任务的顺序倒序排列 (按照更新时间排列? TODO)
      RSS Feed 文件名为 Watcher 文件夹名称

      limit=-1 时迭代所有Page
      '''
  feed_name = os.path.basename(watcher_path)
  pages = []

  for path in tools.all_files(watcher_path, patterns='*.md'):
    if limit == 0: break
    limit -= 1
    try:
      page = Page.load(path)
      pages.append(page)
    except:
      log(f'error Page.load({path})')
      raise

  # for page in pages:
  #   log(page)

  fg = FeedGenerator()
  fg.id('xxxurl/' + feed_name)
  fg.title(feed_name)
  fg.link(href='xxxurl/' + feed_name, rel='alternate')
  # fg.logo('http://ex.com/logo.jpg')
  fg.subtitle('generated by The North Remembers')
  fg.link(href='xxxurl/' + feed_name + 'atom', rel='self')
  fg.language('zh-cn')

  for page in sorted(pages, key=lambda page: page.watch_time):
    fe = fg.add_entry()
    fe.id(page.metadata['url'])
    fe.title(page.metadata['title'])
    fe.link(href=page.metadata['url'])
    fe.description('\n\n' + page.to_html(cut=0) + '\n')
  feed_path = os.path.join(watcher_path, 'feed.xml')
  fg.rss_file(feed_path, pretty=True)
  # log(f'generate_feed `{feed_path}` done')
  return feed_path
